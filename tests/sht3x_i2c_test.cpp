/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.33.0
 * Product:       sht3x
 * Model-Version: 2.0.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "sht3x_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (SHT3X_Tests) {
    void setup() {
        sht3x_init(0x44);
    }
};

TEST (SHT3X_Tests, test_measure_single_shot_high_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_measure_single_shot_high_repeatability(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "measure_single_shot_high_repeatability");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT3X_Tests,
      test_measure_single_shot_high_repeatability_clock_stretching1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_measure_single_shot_high_repeatability_clock_stretching(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(
        local_error, "measure_single_shot_high_repeatability_clock_stretching");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT3X_Tests, test_measure_single_shot_medium_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_measure_single_shot_medium_repeatability(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "measure_single_shot_medium_repeatability");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT3X_Tests,
      test_measure_single_shot_medium_repeatability_clock_stretching1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error =
        sht3x_measure_single_shot_medium_repeatability_clock_stretching(
            &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(
        local_error,
        "measure_single_shot_medium_repeatability_clock_stretching");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT3X_Tests, test_measure_single_shot_low_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_measure_single_shot_low_repeatability(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "measure_single_shot_low_repeatability");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT3X_Tests,
      test_measure_single_shot_low_repeatability_clock_stretching1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_measure_single_shot_low_repeatability_clock_stretching(
        &temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(
        local_error, "measure_single_shot_low_repeatability_clock_stretching");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
}

TEST (SHT3X_Tests, test_enable_heater1) {
    int16_t local_error = 0;
    local_error = sht3x_enable_heater();
    CHECK_EQUAL_ZERO_TEXT(local_error, "enable_heater");
}

TEST (SHT3X_Tests, test_disable_heater1) {
    int16_t local_error = 0;
    local_error = sht3x_disable_heater();
    CHECK_EQUAL_ZERO_TEXT(local_error, "disable_heater");
}

TEST (SHT3X_Tests, test_read_status_register1) {
    int16_t local_error = 0;
    uint16_t a_status_register = 0u;
    local_error = sht3x_read_status_register(&a_status_register);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_status_register");
    printf("a_status_register: %02x\n", a_status_register);
}

TEST (SHT3X_Tests, test_clear_status_register1) {
    int16_t local_error = 0;
    local_error = sht3x_clear_status_register();
    CHECK_EQUAL_ZERO_TEXT(local_error, "clear_status_register");
}

TEST (SHT3X_Tests, test_stop_measurement1) {
    int16_t local_error = 0;
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_soft_reset1) {
    int16_t local_error = 0;
    local_error = sht3x_soft_reset();
    CHECK_EQUAL_ZERO_TEXT(local_error, "soft_reset");
}

TEST (SHT3X_Tests, test_start_periodic_measurement1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_periodic_measurement(REPEATABILITY_MEDIUM,
                                                   MPS_ONE_PER_SECOND);
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_periodic_measurement");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_art_measurement1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_art_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "start_art_measurement");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_0_5_mps_high_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_0_5_mps_high_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_0_5_mps_high_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_0_5_mps_medium_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_0_5_mps_medium_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_0_5_mps_medium_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_0_5_mps_low_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_0_5_mps_low_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_0_5_mps_low_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_1_mps_high_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_1_mps_high_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_1_mps_high_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_1_mps_medium_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_1_mps_medium_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_1_mps_medium_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_1_mps_low_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_1_mps_low_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_1_mps_low_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_2_mps_high_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_2_mps_high_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_2_mps_high_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_2_mps_medium_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_2_mps_medium_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_2_mps_medium_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_2_mps_low_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_2_mps_low_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_2_mps_low_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_4_mps_high_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_4_mps_high_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_4_mps_high_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_4_mps_medium_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_4_mps_medium_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_4_mps_medium_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_4_mps_low_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_4_mps_low_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_4_mps_low_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_10_mps_high_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_10_mps_high_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_10_mps_high_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_10_mps_medium_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_10_mps_medium_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_10_mps_medium_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}

TEST (SHT3X_Tests, test_start_measurement_10_mps_low_repeatability1) {
    int16_t local_error = 0;
    uint16_t temperature_ticks = 0;
    uint16_t humidity_ticks = 0;
    local_error = sht3x_start_measurement_10_mps_low_repeatability();
    CHECK_EQUAL_ZERO_TEXT(local_error,
                          "start_measurement_10_mps_low_repeatability");
    local_error = sht3x_read_measurement(&temperature_ticks, &humidity_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "read_measurement");
    printf("temperature_ticks: %u ", temperature_ticks);
    printf("humidity_ticks: %u\n", humidity_ticks);
    local_error = sht3x_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(local_error, "stop_measurement");
}
